import asyncio
import logging
import sqlite3
import openai
from aiogram import Bot, Dispatcher, types
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import BotCommandScopeChat

#OPENAI_API_KEY = "your_openai_api_key"
# def extract_skills_from_job(job_title):
#     prompt = f"–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏: '{job_title}'. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: Python, Django, SQL."
#
#     response = openai.ChatCompletion.create(
#         model="gpt-4",
#         messages=[{"role": "system", "content": prompt}]
#     )
#
#     skills = response["choices"][0]["message"]["content"]
#     return [skill.strip() for skill in skills.split(",") if skill.strip()] ## –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –∫–æ–¥

API_TOKEN = '7854583744:AAGtrOwNm-PoIpSYY6g4BjtR53CwovflCdw'
YOUR_ADMIN_ID = {5543459759}
ADMIN = 5543459759
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
storage = MemoryStorage()

logging.basicConfig(level=logging.INFO)

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞


from aiogram import Bot
from aiogram.types import BotCommand


async def set_default_commands(bot: Bot, user_id: int):

    user_commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="jobs", description="–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π"),
        BotCommand(command="apply", description="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ]

    admin_commands = [
        BotCommand(command="candidates", description="–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"),
        BotCommand(command="add_job", description="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"),
        BotCommand(command="delete_job", description="–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"),
        BotCommand(command="edit_job", description="–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"),
        BotCommand(command="match", description="–û—Ü–µ–Ω–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="refresh", description="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="edit_stack", description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")
    ]


    if user_id == ADMIN:
        commands = admin_commands
    else:
        commands = user_commands
#    commands = admin_commands if user_id == ADMIN else user_commands
    await bot.set_my_commands(commands, scope=BotCommandScopeChat(chat_id=user_id))
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/candidates")]
        ],
        resize_keyboard=True
    )
class UpdateStackForm(StatesGroup):
    waiting_for_stack = State()
@dp.message(Command("start"))
async def start(message: types.Message):

    user_id = message.from_user.id
    await set_default_commands(bot, user_id)

    if message.from_user.id == ADMIN:
    #    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=admin_keyboard())
        await message.answer("–¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–π/—É–¥–∞–ª—è–π –≤–∞–∫–∞–Ω—Å–∏–∏", reply_markup=admin_keyboard())

    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é", reply_markup=job_keyboard())

class JobForm(StatesGroup):
    waiting_for_job_title = State()
    waiting_for_job_description = State()
    waiting_for_job_salary = State()
    waiting_for_job_requirements = State()


def init_db():
    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS jobs (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        title TEXT UNIQUE)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS candidates (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT,
                        job_id INTEGER,
                        skills TEXT,
                        match_score INTEGER,
                        FOREIGN KEY (job_id) REFERENCES jobs (id))''')
    conn.commit()
    conn.close()
init_db()



def admin_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="add_job")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="delete_job")]
    ])
    return keyboard

@dp.callback_query(F.data == "edit_technologies")
async def edit_technologies(callback: CallbackQuery):
    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, title FROM jobs")
    jobs = cursor.fetchall()
    conn.close()

    if not jobs:
        await callback.message.answer("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=job[1], callback_data=f"edit_stack_{job[0]}")] for job in jobs
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_stack_"))
async def edit_stack_for_job(callback: CallbackQuery):
    job_id = int(callback.data.split("_")[2])

    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("SELECT title, requirements FROM jobs WHERE id = ?", (job_id,))
    job = cursor.fetchone()
    conn.close()

    if job:
        title, requirements = job
        text = f"üìå *{title}*\n\nüìù *–¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:* {requirements if requirements else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        await callback.message.edit_text(text, parse_mode="Markdown",
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                             [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–µ–∫", callback_data=f"update_stack_{job_id}")]
                                         ]))
    else:
        await callback.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await callback.answer()

@dp.callback_query(F.data.startswith("update_stack_"))
async def update_stack(callback: CallbackQuery, state: FSMContext):
    job_id = int(callback.data.split("_")[2])

    await state.update_data(job_id=job_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Python, Django, SQL):")
    await state.set_state(UpdateStackForm.waiting_for_stack)
    await callback.answer()

@dp.message(UpdateStackForm.waiting_for_stack)
async def update_stack_in_db(message: types.Message, state: FSMContext):
    data = await state.get_data()
    job_id = data.get("job_id")

    new_stack = message.text.strip()

    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE jobs SET requirements=? WHERE id=?", (new_stack, job_id))
    conn.commit()
    conn.close()

    await message.answer("–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()
@dp.callback_query(F.data == "delete_job")
async def delete_job(callback: CallbackQuery):
    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM jobs")
    jobs = cursor.fetchall()
    conn.close()

    if not jobs:
        await callback.message.answer("–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=job[1], callback_data=f"del_{job[0]}")] for job in jobs
    ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(F.data.startswith("del_"))
async def confirm_delete_job(callback: CallbackQuery):
    job_id = int(callback.data.split("_")[1])

    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM jobs WHERE id=?", (job_id,))
    conn.commit()
    conn.close()

    await callback.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=admin_keyboard())
    await callback.answer()

def job_keyboard():
    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, title FROM jobs")
    jobs = cursor.fetchall()
    conn.close()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=job[1], callback_data=f"select_{job[0]}")] for job in jobs
    ])
    return keyboard



@dp.message(Command("jobs"))
async def list_jobs(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é", reply_markup=job_keyboard())

@dp.message(Command("candidates"))
async def show_candidates(message: types.Message):
    if message.from_user.id not in YOUR_ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, job_id, skills, match_score FROM candidates ORDER BY match_score DESC")
    candidates = cursor.fetchall()
    conn.close()

    if not candidates:
        await message.answer("–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\n\n"
    for name, job_id, skills, score in candidates:
        text += f"üë§ {name}\nüíº –í–∞–∫–∞–Ω—Å–∏—è ID: {job_id}\nüõ† –ù–∞–≤—ã–∫–∏: {skills}\n‚úÖ –ë–∞–ª–ª—ã: {score}\n\n"

    await message.answer(text)


@dp.callback_query(F.data == "add_job")
async def add_job(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
    await state.set_state(JobForm.waiting_for_job_title)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()

@dp.message(JobForm.waiting_for_job_title)
async def save_job_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ")
    await state.set_state(JobForm.waiting_for_job_description)

@dp.message(JobForm.waiting_for_job_description)
async def save_job_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 000 —Ä—É–±.):")
    await state.set_state(JobForm.waiting_for_job_salary)

@dp.message(JobForm.waiting_for_job_salary)
async def save_job_salary(message: types.Message, state: FSMContext):
    await state.update_data(salary=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Python, SQL, Django):")
    await state.set_state(JobForm.waiting_for_job_requirements)

@dp.message(JobForm.waiting_for_job_requirements)
async def save_job_requrements(message: types.Message, state: FSMContext):
    data = await state.get_data()

    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO jobs (title, description, salary, requirements) VALUES (?, ?, ?, ?)",
                       (data["title"], data["description"], data["salary"], message.text))
        conn.commit()
        await message.answer("–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_keyboard())
    except sqlite3.IntegrityError:
        await message.answer("–¢–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        conn.close()
    await state.clear()


@dp.message(JobForm.waiting_for_job_title)  # –ñ–¥–µ–º –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
async def save_job(message: types.Message, state: FSMContext):
    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO jobs (title) VALUES (?)", (message.text,))
        conn.commit()
        await message.answer("–í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_keyboard())
    except sqlite3.IntegrityError:
        await message.answer("–¢–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        conn.close()
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.callback_query(F.data.startswith("select_"))
async def show_job_details(callback: CallbackQuery):
    job_id = int(callback.data.split("_")[1])

    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("SELECT title, description, salary, requirements FROM jobs WHERE id=?", (job_id,))
    job = cursor.fetchone()
    conn.close()

    if job:
        title, description, salary, requirements = job
        text = f"üìå *{title}*\n\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\nüí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* {salary}\nüìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* {requirements}"
        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{job_id}")]
        ]))
    else:
        await callback.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await callback.answer()


@dp.callback_query(F.data.startswith("apply_"))
async def apply_for_job(callback: CallbackQuery, state: FSMContext):
    job_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤–∞–∫–∞–Ω—Å–∏–∏
    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()
    cursor.execute("SELECT title, requirements FROM jobs WHERE id=?", (job_id,))
    job = cursor.fetchone()
    conn.close()

    if not job:
        await callback.message.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    title, requirements = job
    skills_list = requirements.split(", ") if requirements else []  # –ü–∞—Ä—Å–∏–º —Å—Ç–µ–∫

    if not skills_list:
        await callback.message.answer("–î–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.")
        return

    await state.update_data(job_id=job_id, skills={}, remaining_skills=skills_list)
    await callback.message.answer(f"–í—ã –æ—Ç–∫–ª–∏–∫–∞–µ—Ç–µ—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é *{title}*.\n\n"
                                  "–û—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏:", parse_mode="Markdown",
                                  reply_markup=skills_keyboard(skills_list))
    await callback.answer()


def skills_keyboard(remaining_skills):
    buttons = []
    for skill in remaining_skills:
        buttons.append([
            InlineKeyboardButton(text=f"{skill} +", callback_data=f"skill_{skill}_yes"),
            InlineKeyboardButton(text=f"{skill} -", callback_data=f"skill_{skill}_no")
        ])

    if not remaining_skills:
        buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="submit_skills")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.callback_query(F.data.startswith("skill_"))
async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    user_data = await state.get_data()

    if data.startswith("skill_"):
        _, skill, response = data.split("_")
        skills = user_data.get("skills", {})
        remaining_skills = user_data.get("remaining_skills", [])

        # –£–¥–∞–ª—è–µ–º –Ω–∞–≤—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        if skill in remaining_skills:
            remaining_skills.remove(skill)

        skills[skill] = 1 if response == "yes" else 0

        await state.update_data(skills=skills, remaining_skills=remaining_skills)

        if remaining_skills:
            await callback.message.edit_text("–û—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏:", reply_markup=skills_keyboard(remaining_skills))
        else:
            await callback.message.edit_text("–í—Å–µ –Ω–∞–≤—ã–∫–∏ –æ—Ç–º–µ—á–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
                                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                 [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="submit_skills")]
                                             ]))

    elif data == "submit_skills":
        if "job_id" not in user_data or "skills" not in user_data:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        skills_text = ", ".join([f"{skill}: {'+' if val == 1 else '-'}" for skill, val in user_data["skills"].items()])
        match_score = sum(user_data["skills"].values())

        conn = sqlite3.connect("jobs.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO candidates (name, job_id, skills, match_score) VALUES (?, ?, ?, ?)",
                       (callback.from_user.full_name, user_data["job_id"], skills_text, match_score))
        conn.commit()
        conn.close()

        await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        await state.clear()

    await callback.answer()


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(handle_callback, F.data.startswith("skill_"))
    dp.callback_query.register(handle_callback, F.data == "submit_skills")


async def main():
    register_handlers(dp)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
