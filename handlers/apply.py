from aiogram import Router, types, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from database.queries import get_job_details, add_candidate, get_job_skills
from keyboards.inline import skills_keyboard
from states.forms import ApplicationState

router = Router()

@router.callback_query(F.data.startswith("apply_"))
async def apply_for_job(callback: CallbackQuery, state: FSMContext):
    try:
        job_id = int(callback.data.split("_")[1])
        job = get_job_details(job_id)

        if not job:
            await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        await state.update_data(
            job_id=job_id,
            job_title=job[0],
            job_description=job[1],
            job_salary=job[2]
        )

        required_skills = get_job_skills(job_id)

        if not required_skills:
            await callback.message.answer("–î–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏")
            await state.set_state(ApplicationState.name)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            return
        await state.set_state(ApplicationState.skills_selection)
        await callback.message.answer(
            "–û—Ç–º–µ—Ç—å—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏:\n"
            "‚úÖ - –≤–ª–∞–¥–µ—é\n"
            "‚ùå - –Ω–µ –≤–ª–∞–¥–µ—é",
            reply_markup=skills_keyboard(required_skills)
        )
        await callback.answer()
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
        print(f"Error in apply_for_job: {e}")


@router.callback_query(F.data.startswith("skill_"), ApplicationState.skills_selection)
async def process_skill_selection(callback: CallbackQuery, state: FSMContext):
    try:
        _, skill, choice = callback.data.split("_")
        user_data = await state.get_data()
        score = user_data.get("score", 0)
        skills = user_data.get("skills", {})
        skills[skill] = (choice == "yes")
        await state.update_data(skills=skills)

        await callback.answer(f"–ù–∞–≤—ã–∫ {skill} {'–¥–æ–±–∞–≤–ª–µ–Ω' if choice == 'yes' else '–æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π'}")
        if choice == 'yes':
            score += 1
            await state.update_data(score=score)
        await callback.answer(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º {score}")
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞", show_alert=True)
        print(f"Error in process_skill_selection: {e}")


@router.callback_query(F.data == "submit_skills", ApplicationState.skills_selection)
async def finish_skills_selection(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ApplicationState.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback.answer()


@router.message(ApplicationState.name)
async def process_name(message: Message, state: FSMContext):
    if len(message.text.strip()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è")
        return

    await state.update_data(name=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(ApplicationState.phone)


@router.message(ApplicationState.phone)
async def process_phone(message: Message, state: FSMContext):

    phone = message.text.strip()
    cleaned_phone = ''.join(c for c in phone if c.isdigit())
    if len(cleaned_phone) < 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 5 —Ü–∏—Ñ—Ä)")
        return
    await state.update_data(phone=phone)
    data = await state.get_data()

    confirmed_skills = [skill for skill, has in data.get('skills', {}).items() if has]

    confirmation_text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üîπ –í–∞–∫–∞–Ω—Å–∏—è: {data['job_title']}\n"
        f"üîπ –ò–º—è: {data['name']}\n"
        f"üîπ –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üîπ –ù–∞–≤—ã–∫–∏: {', '.join(confirmed_skills) if confirmed_skills else '–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤'}"
    )

    await message.answer(confirmation_text)
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(ApplicationState.confirmation)


@router.message(ApplicationState.confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    response = message.text.strip().lower()

    if response == '–¥–∞':
        data = await state.get_data()

        add_candidate(
            name=data['name'],
            job_id=data['job_id'],
            phone=data['phone'],
            skills=data['skills'],
            match_score=data['score']
        )

        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
        await state.clear()
    else:
        await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(ApplicationState.name)